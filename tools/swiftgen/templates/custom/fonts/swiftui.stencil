// Generated using SwiftGen â€” https://github.com/SwiftGen/SwiftGen

{% if families %}
import SwiftUI
{% for family in families %}
{% set identifierName %}{{family.name|swiftIdentifier:"pretty"|lowerFirstWord|escapeReservedKeywords}}{% endset %}
{% set styleTypeName %}{{family.name|swiftIdentifier:"pretty"|escapeReservedKeywords}}Style{% endset %}

extension Font {
	/// Create a custom font with the given name and size that scales relative to the given textStyle.
	///
	/// Font is static in iOS 13.0
	public static func {{identifierName}}Dynamic(_ style: {{styleTypeName}}, size: CGFloat, relativeTo textStyle: TextStyle = .body) -> Font {
		if #available(iOS 14.0, *) {
			return Font.custom(style.rawValue, size: size, relativeTo: textStyle)
		} else {
			return Font.custom(style.rawValue, size: size)
		}
	}

	/// Create a custom font with the given name and size that scales with the body text style.
	public static func {{identifierName}}(_ style: {{styleTypeName}}, size: CGFloat) -> Font {
		return Font.custom(style.rawValue, size: size)
	}

	/// Create a custom font with the given name and a fixed size that does not scale with Dynamic Type.
	@available(iOS 14.0, *)
	public static func {{identifierName}}(_ style: {{styleTypeName}}, fixedSize: CGFloat) -> Font {
		return Font.custom(style.rawValue, fixedSize: fixedSize)
	}

	/// Create a custom font with the given name and size that scales relative to the given textStyle.
	@available(iOS 14.0, *)
	public static func {{identifierName}}(_ style: {{styleTypeName}}, size: CGFloat, relativeTo textStyle: TextStyle = .body) -> Font {
		return Font.custom(style.rawValue, size: size, relativeTo: textStyle)
	}

	public enum {{styleTypeName}}: String {
	{% for font in family.fonts %}
		case {{font.style|swiftIdentifier:"pretty"|lowerFirstWord|escapeReservedKeywords}} = "{{font.name}}"
	{% endfor %}
	}
}
{% endfor %}
{% else %}
// No fonts found
{% endif %}